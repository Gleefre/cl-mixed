(ql:quickload '(cl-mixed cl-out123 cl-mpg123))

(defmacro with-edge-setup ((file out samplerate &key pathname samples) &body body)
  `(call-with-edge-setup (lambda (,file ,out ,samplerate) ,@body) ,pathname ,samples))

(defun call-with-edge-setup (function pathname samples)
  (let* ((file (cl-mpg123:connect (cl-mpg123:make-file pathname :buffer-size NIL)))
         (out  (cl-out123:connect (cl-out123:make-output NIL)))
         (samplerate 0))
    (format T "~&Playback device ~a / ~a" (cl-out123:driver out) (cl-out123:device out))
    (multiple-value-bind (rate channels encoding) (cl-mpg123:file-format file)
      (format T "~&Input format ~a Hz ~a channels ~a encoded." rate channels encoding)
      (setf samplerate rate)
      (setf (cl-mpg123:buffer-size file) (* samples channels (cl-mixed:samplesize encoding)))
      (setf (cl-mpg123:buffer file) (cffi:foreign-alloc :uchar :count (cl-mpg123:buffer-size file)))
      (cl-out123:start out :rate rate :channels channels :encoding encoding))
    (unwind-protect
         (funcall function file out samplerate)
      (cl-out123:stop out)
      (cl-out123:disconnect out)
      (cl-mpg123:disconnect file))))

(defun play (file out mixer samples)
  (loop with buffer = (cl-mpg123:buffer file)
        with buffersize = (cl-mpg123:buffer-size file)
        for read = (cl-mpg123:process file)
        while (< 0 read)
        do (loop for i from read below buffersize
                 do (setf (cffi:mem-aref buffer :uchar i) 0))
           (cl-mixed:mix samples mixer)
           (let ((played (cl-out123:play out buffer buffersize)))
             (when (/= played read)
               (format T "~&Playback is not catching up with input by ~a bytes."
                       (- read played))))))

(defun test-space (mp3 &key (samples 500))
  (with-edge-setup (file out samplerate :pathname mp3 :samples samples)
    (let* ((source (cl-mixed:make-source (cl-mpg123:buffer file)
                                         (cl-mpg123:buffer-size file)
                                         (cl-mpg123:encoding file)
                                         (cl-mpg123:channels file)
                                         :alternating
                                         samplerate))
           (drain (cl-mixed:make-drain (cl-mpg123:buffer file)
                                       (cl-mpg123:buffer-size file)
                                       (cl-out123:encoding out)
                                       (cl-out123:channels out)
                                       :alternating
                                       samplerate))
           (space (make-instance 'cl-mixed:space :samplerate samplerate))
           (mixer (cl-mixed:make-mixer source space drain)))
      (cl-mixed:with-buffers samples (li ri lo ro)
        (cl-mixed:connect source :left space 0 li)
        (setf (cl-mixed:output :right source) ri)
        (cl-mixed:connect space :left drain :left lo)
        (cl-mixed:connect space :right drain :right ro)
        (cl-mixed:start mixer)
        (unwind-protect
             (loop for tt = 0.0 then (+ tt 0.005)
                   for x = (* 500 (sin tt))
                   do (setf (cl-mixed:input-field :location 0 space) (list x 0 2))
                      (play file out mixer samples))
          (cl-mixed:end mixer))))))
